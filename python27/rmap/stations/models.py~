from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy

from django.db.models import permalink
from django.db.models import Q

from  django import VERSION as djversion

if ((djversion[0] == 1 and djversion[1] >= 3) or 
    djversion[0] > 1):

    from django.db import models
    from django.db.models import signals

    class DeletingFileField(models.FileField):
        """
        FileField subclass that deletes the refernced file when the model object
        itself is deleted.
        
        WARNING: Be careful using this class - it can cause data loss! This class
        makes at attempt to see if the file's referenced elsewhere, but it can get
        it wrong in any number of cases.
        """
        def contribute_to_class(self, cls, name):
            super(DeletingFileField, self).contribute_to_class(cls, name)
            signals.post_delete.connect(self.delete_file, sender=cls)
        
        def delete_file(self, instance, sender, **kwargs):
            file = getattr(instance, self.attname)
            # If no other object of this type references the file,
            # and it's not the default value for future objects,
            # delete it from the backend.
            
            if file and file.name != self.default and \
                    not sender._default_manager.filter(**{self.name: file.name}):
                file.delete(save=False)
            elif file:
                # Otherwise, just close the file, so it doesn't tie up resources.
                file.close()

else:
    DeletingFileField=models.FileField

class StationCategory(models.Model):
    """Category model for Stations"""
    STATION_CATEGORY_CHOICES = (
        ('Beautifull & Good', 'Bad & Wrong'),
        ('Test & Bugs', 'Unknown & Missing'),
    )
    name = models.CharField(max_length=50, choices=STATION_CATEGORY_CHOICES)
    slug = models.SlugField(blank=True, unique=True, help_text=ugettext_lazy('A <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#slugfield">slug</a> is a URL-friendly nickname. For example, a slug for "Games & Hobbies" is "games-hobbies".'))

    class Meta:
        ordering = ['slug']
        verbose_name = 'station category'
        verbose_name_plural = 'station categories'

    def __unicode__(self):
        return u'%s' % (self.name)



class StationMetadata(models.Model):
    """StationMetadata model."""

    name = models.CharField(max_length=255,help_text=ugettext_lazy("station name"))
    active = models.BooleanField(ugettext_lazy("Active"),default=True,help_text=ugettext_lazy("Activate the station for measurements"))
    slug = models.SlugField(unique=True, help_text=ugettext_lazy('Auto-generated from name.'))
    lat = models.FloatField(ugettext_lazy("Latitude"),default=None,null=False,blank=False, help_text=ugettext_lazy('Precise Latitude of the station'))
    lon = models.FloatField(ugettext_lazy("Longitude"),default=None,null=False,blank=False, help_text=ugettext_lazy('Precise Longitude of the station'))
    category = models.ForeignKey(StationCategory, verbose_name=ugettext_lazy('Station category'), help_text=ugettext_lazy('The categorization that follow the rmap RFC law'))


    class Meta:
        ordering = ['slug']
        verbose_name = 'station metadata'
        verbose_name_plural = 'stations metadata'

    def __unicode__(self):
        return u'%s' % (self.name)

